<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>反応速度チェッカー</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            transition: background-color 0.1s ease-out;
            -webkit-tap-highlight-color: transparent;
        }
        .game-container {
            text-align: center;
            padding: 20px;
            border-radius: 12px;
            background-color: #ffffff;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 500px;
        }
        .clickable-area {
            width: 100%;
            height: 220px; /* 履歴表示エリアを考慮して少し高さを調整 */
            border-radius: 12px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.1s ease-out;
            user-select: none;
        }
        .message-box {
            min-height: 50px; /* 少し調整 */
            margin-top: 10px;
            margin-bottom: 10px;
        }
        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            border: none;
            outline: none;
        }
        .btn:active {
            transform: scale(0.95);
        }
        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }
        .btn-primary:hover {
            background-color: #2563eb;
        }
        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }
        .btn-secondary:hover {
            background-color: #4b5563;
        }

        body.waiting {
            background-color: #ef4444; /* red-500 */
        }
        body.ready-to-click {
            background-color: #22c55e; /* green-500 */
        }
        body.result, body.initial {
            background-color: #f3f4f6; /* gray-100 */
        }

        .clickable-area-text {
            font-size: 1.5rem; /* 24px */
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        body.waiting .clickable-area-text,
        body.ready-to-click .clickable-area-text {
             color: white;
        }
        body.initial .clickable-area-text,
        body.result .clickable-area-text {
            color: #374151; /* gray-700 */
        }
         body.initial .clickable-area.bg-gray-200 .clickable-area-text {
             color: #374151; /* gray-700 */
        }


        .history-container {
            margin-top: 15px; /* 少し調整 */
            padding: 15px;
            background-color: #e5e7eb; /* gray-200 */
            border-radius: 8px;
        }
        .history-title {
            font-size: 1.125rem; /* 18px */
            font-weight: 600; /* semibold */
            color: #4b5563; /* gray-600 */
            margin-bottom: 8px;
        }
        .history-list {
            list-style-type: none;
            padding-left: 0;
            max-height: 120px; /* 5件表示に十分な高さ */
            overflow-y: auto;
            margin-bottom: 10px;
        }
        .history-list li {
            padding: 4px 0;
            color: #374151; /* gray-700 */
            border-bottom: 1px solid #d1d5db; /* gray-300 */
        }
        .history-list li:last-child {
            border-bottom: none;
        }
        .no-history {
            color: #6b7280; /* gray-500 */
            font-style: italic;
        }
        .average-time-text {
            font-size: 1rem; /* 16px */
            font-weight: 600; /* semibold */
            color: #1f2937; /* gray-800 */
            margin-top: 8px;
        }

    </style>
</head>
<body class="initial">

    <div class="game-container" id="gameContainer">
        <h1 class="text-3xl font-bold mb-3 text-gray-800">反応速度チェッカー</h1>

        <div id="clickableArea" class="clickable-area bg-gray-200 mb-4">
            <p id="clickableAreaText" class="clickable-area-text">ここにメッセージが表示されます</p>
        </div>

        <div class="message-box">
            <p id="message" class="text-lg text-gray-700"></p> {/* text-lgに調整 */}
            <p id="resultTime" class="text-xl font-bold text-blue-600"></p> {/* text-xlに調整 */}
        </div>

        <button id="actionButton" class="btn btn-primary mb-3">スタート</button>

        <div class="history-container" id="historyContainer">
            <h3 class="history-title">反応履歴 (直近5回)</h3>
            <ul id="historyList" class="history-list">
                {/* */}
            </ul>
            <p id="averageTime" class="average-time-text">平均: --- ms</p>
        </div>
    </div>

    <script>
        // DOM要素の取得
        const gameContainer = document.getElementById('gameContainer');
        const clickableArea = document.getElementById('clickableArea');
        const clickableAreaText = document.getElementById('clickableAreaText');
        const messageElement = document.getElementById('message');
        const resultTimeElement = document.getElementById('resultTime');
        const actionButton = document.getElementById('actionButton');
        const bodyElement = document.body;
        const historyListElement = document.getElementById('historyList');
        const averageTimeElement = document.getElementById('averageTime'); // 平均時間表示用P要素

        // ゲームの状態を表す変数
        let gameState = 'initial'; // initial, waiting, readyToClick, result, flying
        let startTime;
        let timerId;
        let reactionHistory = []; // 反応時間の履歴を保存する配列 (最大5件)

        // 初期設定
        function initializeGame() {
            gameState = 'initial';
            bodyElement.className = 'initial';
            clickableArea.classList.remove('bg-red-500', 'bg-green-500');
            clickableArea.classList.add('bg-gray-200');
            clickableAreaText.textContent = "画面が赤から緑に変わったらクリック！";
            messageElement.textContent = "";
            resultTimeElement.textContent = "";
            actionButton.textContent = 'スタート';
            actionButton.className = 'btn btn-primary mb-3'; // margin bottom追加
            actionButton.style.display = 'block';
            clearTimeout(timerId);
            updateHistoryDisplay(); // ゲーム初期化時に履歴と平均値を更新表示
        }

        // ゲーム開始処理
        function startGame() {
            if (gameState === 'initial' || gameState === 'result' || gameState === 'flying') {
                gameState = 'waiting';
                bodyElement.className = 'waiting';
                clickableArea.classList.remove('bg-gray-200', 'bg-green-500');
                clickableArea.classList.add('bg-red-500');
                clickableAreaText.textContent = "待機中...";
                messageElement.textContent = "緑色になるまで待ってください...";
                resultTimeElement.textContent = "";
                actionButton.style.display = 'none';

                const randomDelay = Math.random() * 3000 + 1000; // 1秒から4秒 (少し短縮)
                timerId = setTimeout(() => {
                    if (gameState === 'waiting') { // フライングされていない場合のみ実行
                        gameState = 'readyToClick';
                        bodyElement.className = 'ready-to-click';
                        clickableArea.classList.remove('bg-red-500');
                        clickableArea.classList.add('bg-green-500');
                        clickableAreaText.textContent = "クリック！";
                        messageElement.textContent = "今だ！クリック！";
                        startTime = new Date().getTime();
                    }
                }, randomDelay);
            }
        }

        // クリック処理
        function handleClick() {
            if (gameState === 'waiting') {
                // フライング処理
                clearTimeout(timerId); // 色変更タイマーをキャンセル
                gameState = 'flying';
                bodyElement.className = 'result';
                clickableArea.classList.remove('bg-red-500', 'bg-green-500');
                clickableArea.classList.add('bg-gray-200');
                clickableAreaText.textContent = "フライングでした";
                messageElement.textContent = 'フライング！緑色になるまで待ってください。';
                resultTimeElement.textContent = "";
                actionButton.textContent = 'もう一度挑戦';
                actionButton.className = 'btn btn-secondary mb-3';
                actionButton.style.display = 'block';
            } else if (gameState === 'readyToClick') {
                const endTime = new Date().getTime();
                const reactionTime = endTime - startTime;

                gameState = 'result';
                bodyElement.className = 'result';
                clickableArea.classList.remove('bg-green-500');
                clickableArea.classList.add('bg-gray-200');
                clickableAreaText.textContent = "結果を確認してください";

                messageElement.textContent = getResultMessage(reactionTime);
                resultTimeElement.textContent = `あなたの反応時間: ${reactionTime} ミリ秒`;
                actionButton.textContent = 'もう一度挑戦';
                actionButton.className = 'btn btn-primary mb-3';
                actionButton.style.display = 'block';

                // 反応履歴に追加
                reactionHistory.push(reactionTime);
                if (reactionHistory.length > 5) {
                    reactionHistory.shift(); // 古い履歴から削除 (常に最新5件を保持)
                }
                updateHistoryDisplay(); // 履歴表示と平均値を更新
            }
        }

        // 反応時間に応じたメッセージを取得
        function getResultMessage(time) {
            if (time < 200) return "超人的な速さです！🚀";
            if (time < 300) return "素晴らしい反応速度！✨";
            if (time < 400) return "良い反応速度ですね！👍";
            if (time < 500) return "平均的な反応速度です。😊";
            return "もう少し頑張りましょう！💪";
        }

        // 履歴表示と平均値を更新する関数
        function updateHistoryDisplay() {
            historyListElement.innerHTML = ''; // 既存の履歴をクリア
            if (reactionHistory.length === 0) {
                const noHistoryItem = document.createElement('li');
                noHistoryItem.textContent = 'まだ履歴はありません';
                noHistoryItem.classList.add('no-history');
                historyListElement.appendChild(noHistoryItem);
                averageTimeElement.textContent = '平均: --- ms';
            } else {
                // 新しい履歴が上に来るように逆順で表示
                const reversedHistory = [...reactionHistory].reverse();
                reversedHistory.forEach(time => {
                    const listItem = document.createElement('li');
                    listItem.textContent = `${time} ms`;
                    historyListElement.appendChild(listItem);
                });

                // 平均値を計算して表示
                const sum = reactionHistory.reduce((total, currentTime) => total + currentTime, 0);
                const average = Math.round(sum / reactionHistory.length);
                averageTimeElement.textContent = `平均: ${average} ms`;
            }
        }

        // イベントリスナーの設定
        actionButton.addEventListener('click', () => {
            if (gameState === 'initial' || gameState === 'result' || gameState === 'flying') {
                startGame();
            }
        });

        clickableArea.addEventListener('click', handleClick);

        // 初期化関数の呼び出し
        initializeGame();
    </script>
</body>
</html>
